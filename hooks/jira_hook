#!/usr/bin/env python3

import configparser
import os
import re
import json

from jira import JiraHook, JiraLogin, JiraLogout, JiraAddComment

config = configparser.ConfigParser()

config.read(os.path.expanduser('~/gerrit_hook.config'))
jira_config = config['jira']

test_data = r"""
{
    "project":"test/gerrit_hooks",
    "branch":"master",
    "id":"Id70bf5fd8d4cc2bd583e15d688a713dcac6dbcc6",
    "number":"1",
    "subject":"TEST-1 Test patchset-created hook",
    "owner":
    {
        "email":"d.brown@bigdavedev.com",
        "username":"dabr"
    },
    "url":"https://git.bigdavedev.com/1",
    "commitMessage":"TEST-1 Test patchset-created hook\n\nChange-Id: Id70bf5fd8d4cc2bd583e15d688a713dcac6dbcc6\nSigned-off-by: David Brown \u003cdavid.brown@consat.se\u003e\n",
    "createdOn":1457362038,
    "lastUpdated":1457429401,
    "open":true,
    "status":"NEW"
}
"""

def get_test_issue_and_comment():
    what = 'patchset-created'
    return format_comment(what, json.loads(test_data))

def format_comment(action, json):
    comment_template = """
    {who} {summary}: {change_number}
    {{quote}}
    Subject: *{subject}*
    Project: {project}
    Branch: {branch}
    ChangeId: {change_id}
    {{quote}}
    {{color:#cccccc}}Generated by Gerrit hooks{{color}}
    """
    who = '[~{}]'.format(json['owner']['username'])
    summary = get_summary(action)
    change_number = '[{}|{}]'.format(json['number'], json['url'])
    subject = json['subject']
    project = json['project']
    branch = json['branch']
    change_id = '[{}|{}]'.format(json['id'], json['url'])

    comment = comment_template.format(who=who,
                                      summary=summary,
                                      subject=subject,
                                      change_number=change_number,
                                      project=project,
                                      branch=branch,
                                      change_id=change_id)
    matches = re.findall('^[A-Z]+-[0-9]+', subject)
    issue_id = matches[0]
    return issue_id, comment

def get_summary(action):
    if(action == 'patchset-created'):
        return 'uploaded a new patchset'
    elif(action == 'change-merged'):
        return 'merged change'
    elif(action == 'change-abandoned'):
        return 'abandoned change'
    else:
        raise ValueError('{} not supported by this hook'.format(action))

issue, comment = get_test_issue_and_comment()

jira_hook = JiraHook(jira_config['url'])
jira_hook.appendJiraCommand(command=JiraLogin(jira_config['username'], jira_config['password']))
jira_hook.appendJiraCommand(command=JiraAddComment(issue, comment))
jira_hook.appendJiraCommand(command=JiraLogout())
jira_hook.execute()
